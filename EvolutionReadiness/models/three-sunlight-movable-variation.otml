<?xml version="1.0" encoding="UTF-8"?>
<otrunk id="23d3fb4f-123a-425f-9d60-d84e145c0678">
  <imports>
    <import class="org.concord.otrunk.OTIncludeRootObject" />
    <import class="org.concord.otrunk.OTInclude" />
    <import class="org.concord.otrunk.OTSystem" />
    <import class="org.concord.otrunk.biologica.OTOrganismPlacement" />
    <import class="org.concord.otrunk.biologica.OTEnvironment" />
    <import class="org.concord.otrunk.biologica.OTOrganism" />
    <import class="org.concord.otrunk.biologica.OTWorld" />
    <import class="org.concord.otrunk.biologica.agent.OTAgentSpecies" />
    <import class="org.concord.otrunk.biologica.agent.OTAgentTrait" />
    <import class="org.concord.otrunk.biologica.agent.OTAgentPropertyImageMap" />
    <import class="org.concord.otrunk.biologica.environment.OTAddAgentButton" />
    <import class="org.concord.otrunk.biologica.environment.OTEnvironmentHolder" />
    <import class="org.concord.otrunk.biologica.rules.OTRule" />
    <import class="org.concord.otrunk.biologica.rules.OTRuleCondition" />
    <import class="org.concord.otrunk.biologica.rules.OTRuleConsequence" />
    <import class="org.concord.otrunk.ui.OTCurriculumUnit" />
    <import class="org.concord.otrunk.ui.OTPlacement" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshot" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshotButton" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshotAlbum" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshotChooser" />
    <import class="org.concord.otrunk.view.OTViewEntry" />
    <import class="org.concord.otrunk.view.OTViewBundle" />
    <import class="org.concord.otrunk.view.OTViewMode" />
    <import class="org.concord.otrunk.view.document.OTCompoundDoc" />
    <import class="org.concord.otrunk.script.ui.OTScriptObject" />
    <import class="org.concord.otrunk.script.js.OTJavascript" />
    <import class="org.concord.otrunk.script.OTScriptEngineBundle" />
    <import class="org.concord.otrunk.script.OTScriptEngineEntry" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariable" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariableComponent" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariableRealObject" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariableView" />
    <import class="org.concord.otrunk.script.ui.OTScriptButton" />
    <import class="org.concord.framework.otrunk.view.OTFrame" />
  </imports>
  <objects>
    <OTSystem>
      <bundles>
        <object refid="8d880970-c22a-11dc-95ff-0800200c9a66" />
        <OTScriptEngineBundle>
          <engines>
            <OTScriptEngineEntry objectClass="org.concord.otrunk.script.js.OTJavascript" engineClass="org.concord.otrunk.script.js.OTJavascriptEngine" />
          </engines>
        </OTScriptEngineBundle>
      </bundles>
      <includes>
        <OTInclude href="../global-imports/er-view-bundle.otml" />
        <OTInclude href="species/annual-varied-plants.otml" />
      </includes>
      <root>
        <OTEnvironmentHolder local_id="env-holder" width="590" height="460" toolbar="run,info cursor,carry,reset">
          <environment>
            <OTEnvironment local_id="environment" environmentWidth="15" environmentHeight="15" width="580" height="445" showRunButton="false" winterLength="20" summerLength="80" orgSizeMultiplier="2.0" backgroundImageSrc="images/sun3levels-cropped.png">
              <world>
                <OTWorld local_id="peasimple_world" speciesPath="org/concord/biologica/worlds/peasimple.xml" />
              </world>
              <barriers>
                <OTPlacement x="0" y="0" width="25" height="150" />
                <OTPlacement x="141" y="0" width="9" height="150" />
                <OTPlacement x="25" y="0" width="117" height="9" />
                <OTPlacement x="25" y="33" width="117" height="21" />
                <OTPlacement x="25" y="78" width="117" height="21" />
                <OTPlacement x="25" y="123" width="117" height="27" />
              </barriers>
              <rules>
                <OTRule description="Health depends on leaves and sunlight">
                  <conditions>
                    <OTRuleCondition property="gen" equalsValue="1.0" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="Health" ruleScript="var diff = Math.abs(leaves - (sunlight*10)); return 1.0 - ((diff) / 20)">
                      <propertyVariables>
                        <string>leaves</string>
                        <string>sunlight</string>
                      </propertyVariables>
                    </OTRuleConsequence>
                  </consequences>
                </OTRule>
                <OTRule description="Gen 2: Health 1.0 in spring">
                  <conditions>
                    <OTRuleCondition property="gen" equalsValue="2.0" />
                    <OTRuleCondition property="Season" equals="spring" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="Health" newValueFloat="1.0" />
                    <OTRuleConsequence property="Chance of flowering" newValueFloat="0.0" />
                  </consequences>
                </OTRule>
                <OTRule description="Gen 2: Health depends on leaves and sunlight in fall">
                  <conditions>
                    <OTRuleCondition property="gen" equalsValue="2.0" />
                    <OTRuleCondition property="Season" equals="fall" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="Health" ruleScript="var diff = Math.abs(leaves - (sunlight*10)); return 1.0 - ((diff) / 20)">
                      <propertyVariables>
                        <string>leaves</string>
                        <string>sunlight</string>
                      </propertyVariables>
                    </OTRuleConsequence>
                  </consequences>
                </OTRule>
                <OTRule description="Leaf description rule">
                  <conditions>
                    <OTRuleCondition property="leaves" maxValue="3.0" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="type of leaves" newValueString="bushy" />
                  </consequences>
                </OTRule>
                <OTRule description="Immortality in spring">
                  <conditions>
                    <OTRuleCondition property="Season" equals="spring" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="is immortal" newValueBoolean="true" />
                  </consequences>
                </OTRule>
                <OTRule description="Die in winter">
                  <conditions>
                    <OTRuleCondition property="Season" equals="winter" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="is immortal" newValueBoolean="false" />
                    <OTRuleConsequence property="Health" newValueFloat="0.0" />
                  </consequences>
                </OTRule>
                <OTRule description="Flower health is 1">
                  <conditions>
                    <OTRuleCondition property="Has flower" equals="true" />
                  </conditions>
                  <consequences>
                    <OTRuleConsequence property="Health" newValueFloat="1.0" />
                  </consequences>
                </OTRule>
              </rules>
            </OTEnvironment>
          </environment>
          <traitsToShow>
            <string>leaves</string>
            <string>Health</string>
          </traitsToShow>
          <addAgentsButtons>
            <OTAddAgentButton text="Add Plant A" limit="-1">
              <species>
                <object refid="f5732706-c9c2-4e29-8c99-4c668dda89b0" />
              </species>
              <agentTraits>
                <OTAgentTrait property="leaves">
                  <defaultValues>
                    <float>5.0</float>
                  </defaultValues>
                </OTAgentTrait>
                <OTAgentTrait property="gen">
                  <defaultValues>
                    <int>1</int>
                  </defaultValues>
                </OTAgentTrait>
              </agentTraits>
            </OTAddAgentButton>
          </addAgentsButtons>
          <scripts>
            <OTScriptObject local_id="setup-script" name="Setup script">
              <script>
                <OTJavascript src="scripts/gradated-sunlight-five-blocks/setup.js">
                  <script>importPackage(Packages.java.lang);
importPackage(Packages.java.awt);
importPackage(Packages.org.concord.biologica.environment);
  			
function init() {
                        env.removeAllAgents()
                       env.setStepCount(0)
                       envHolder.pauseAction()
	var world = env.getWorld()
	env.setColumns(15)
	env.setRows(15)
	env.setWrapNorthSouth(false)
	env.setWrapEastWest(false)
	for (var i = 0; i &lt; 15; i++) {
	        for (var j = 0; j &lt; 15; j++) {
	        	var envUnit = new EnvironmentUnit(env, null, i, j)
	        	env.setEnvironmentUnit(envUnit, i, j)
	        	if (j &lt; 4)
	        		percentSunlight = 0.7
	        	else if (j &lt; 9)
	        		percentSunlight = 0.5
	        	else if (j &lt; 12)
	        		percentSunlight = 0.3
	        		
	        	envUnit.setProperty("sunlight", new Float(percentSunlight))
	        	
	        	var r =  (percentSunlight) * 0.5
	        	var g = r * 0.5
	        	var b = g * 0.2
	        	var color = new Color(r+0.3, g+0.2, b+0.1)
	        	var terrain = new Terrain(world, "terrain", color)
	        	envUnit.setTerrain(terrain)
            }
        }
    holder.repaint();
	return true;
}

function save() {
	return true;
}</script>
                </OTJavascript>
              </script>
              <variables>
                <OTScriptVariableRealObject name="env">
                  <reference>
                    <object refid="${environment}" />
                  </reference>
                </OTScriptVariableRealObject>
                <OTScriptVariableRealObject name="envHolder">
                  <reference>
                    <object refid="${env-holder}" />
                  </reference>
                </OTScriptVariableRealObject>
                <OTScriptVariableRealObject name="holder">
                  <reference>
                    <object refid="${env-holder}" />
                  </reference>
                </OTScriptVariableRealObject>
              </variables>
              <scriptState />
            </OTScriptObject>
            <OTScriptObject name="Make offspring script">
              <script>
                <OTJavascript>
                  <script>importPackage(Packages.java.lang);
importPackage(Packages.java.awt);
importPackage(Packages.java.util);
importPackage(Packages.org.concord.biologica.environment);
importPackage(Packages.org.concord.biologica.agent);

var rand;
  			
function init() {
	env.addChangeListener(changeListener)
	env.addStepListener(stepListener)
	
	rand = new Random()
	
	return true;
}

var message1StepCount = 0;
var message2StepCount = 0;
var waitingForMessage1 = false;
var waitingForMessage2 = false;

var changeHandler = {
	environmentChanged: function(evt){
		var agents = env.getAllAgents()
		if (agents.size() == 1){				// generation 1
			if (evt.getType() == EnvironmentChangeEvent.SEASON_CHANGE){
				if (evt.getValue() == "spring" || evt.getValue() == "summer" ){
					setPropertyOnAllAgents("Chance of flowering", 0.0)
					setPropertyOnAllAgents("Days to seed", -1)
				}
				if (evt.getValue() == "fall"){
					setPropertyOnAllAgents("Chance of flowering", 0.5)
				}
			}
		} else {								// generation 2
			if (evt.getType() == EnvironmentChangeEvent.SEASON_CHANGE){
				if (evt.getValue() == "summer"){
					waitingForMessage1 = true
				}
				if (evt.getValue() == "fall"){
					env.setWinterLength(-1)
					waitingForMessage2 = true;
				}
			}
		}
	}		
}
				
var changeListener = new EnvironmentChangeListener(changeHandler)	

function setPropertyOnAllAgents(property, value){
	var agents = env.getAllAgents()
	for (var i = 0; i &lt; agents.size(); i++) {
		var agent = agents.get(i)
		agent.setProperty(property, value)
	}
}

var flowerAge = 0

var stepHandler = {
	environmentStepped: function(){
		if (env.getStepCount &lt; 2)
			flowerAge = 0
		
		var agents = env.getAllAgents()
		if (agents.size() == 1 &amp;&amp; agents.get(0).getProperty("Has flower").equals(true)){
			flowerAge++
			if (flowerAge &gt; 6){
				makeBabies(agents.get(0))
			}
		}
		
		if (waitingForMessage1 == true){
			message1StepCount++;
					if (message1StepCount == 5){
						showMessage("Take a look at the new plants that are growing. Do they all look exactly the same?\nYou can use the information tool to look at the plants closely.", env)
						envHolder.pauseAction()
					}
		}
		
		if (waitingForMessage2 == true){
			message2StepCount++;
					if (message2StepCount == 5){
						showMessage("It looks like some of your plants have wilted! Why do you think this happened?", env)
						envHolder.pauseAction()
					}	
		}
		
	}		
}
				
var stepListener = new EnvironmentStepListener(stepHandler)	

function makeBabies(agent){
	
	agent.setProperty("Has flower", false)
	
	for (var i = 0; i &lt; 4; i++){
		var agentTrait = new AgentTrait()
		agentTrait.setProperty("leaves", null, 5.0)
		var child = agent.cloneSelf(agentTrait)
		child.setProperty("gen", 2)
		setLocation(agent, child)
		env.addAgent(child)
	}
	agentTrait = new AgentTrait()
	agentTrait.setProperty("leaves", null, 3.0)
	var child =  agent.cloneSelf(agentTrait)
	child.setProperty("gen", 2)
	setLocation(agent, child)
	env.addAgent(child)
	
	agentTrait = new AgentTrait()
	agentTrait.setProperty("leaves", null, 7.0)
	child =  agent.cloneSelf(agentTrait)
	child.setProperty("gen", 2)
	setLocation(agent, child)
	env.addAgent(child)
}

function setLocation(parent, child){
	var xLocParent = parent.getLocation().x;
	var yLocParent = parent.getLocation().y;
	
	do {
		var xLocChild = xLocParent - 30 + (rand.nextInt(60))
		var yLocChild = yLocParent - 5 + (rand.nextInt(10))
		child.setLocation(new Point(xLocChild, yLocChild))
	} while (env.isInBarrier(child) || onTopOfSomeone(child))
}

function onTopOfSomeone(agent){
	var x1 = agent.getLocation().x
	var y1 = agent.getLocation().y
	var agents = env.getAllAgents()
	for (var i = 0; i &lt; agents.size(); i++) {
		var otherAgent = agents.get(i)
		var x2 = otherAgent.getLocation().x
		var y2 = otherAgent.getLocation().y
		if (Math.abs(x1 - x2) &lt; 5 &amp;&amp; Math.abs(y1 - y2) &lt; 9)
			return true
	}
	return false
}
				

function save() {
	return true;
}</script>
                  <scripts>
                    <OTJavascript src="scripts/common/message.js" />
                  </scripts>
                </OTJavascript>
              </script>
              <variables>
                <OTScriptVariableRealObject name="env">
                  <reference>
                    <object refid="${environment}" />
                  </reference>
                </OTScriptVariableRealObject>
                <OTScriptVariableRealObject name="envHolder">
                  <reference>
                    <object refid="${env-holder}" />
                  </reference>
                </OTScriptVariableRealObject>
                <OTScriptVariableRealObject name="holder">
                  <reference>
                    <object refid="${env-holder}" />
                  </reference>
                </OTScriptVariableRealObject>
              </variables>
              <scriptState />
            </OTScriptObject>
          </scripts>
        </OTEnvironmentHolder>
      </root>
    </OTSystem>
  </objects>
</otrunk>

